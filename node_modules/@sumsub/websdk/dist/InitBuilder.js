import SnsWebSdk from './SnsWebSdk';
import { getTokenVersion } from './common';
var InitBuilder = /** @class */ (function () {
    function InitBuilder(accessToken, updateAccessToken) {
        this.config = null;
        this.reusableConfig = null;
        this.eventHandlers = {};
        this.anyEventHandler = null;
        this.options = {
            adaptIframeHeight: true,
            addViewportTag: true,
            enableScrollIntoView: true,
        };
        if (typeof accessToken !== 'string') {
            throw new Error('Access token must be a string');
        }
        if (typeof updateAccessToken !== 'function') {
            throw new Error('updateAccessToken callback is required');
        }
        this.accessToken = accessToken;
        this.updateAccessToken = updateAccessToken;
    }
    InitBuilder.prototype.onTestEnv = function () {
        return this;
    };
    InitBuilder.prototype.withBaseUrl = function (baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    };
    InitBuilder.prototype.withConf = function (config) {
        this.config = config;
        return this;
    };
    InitBuilder.prototype.withReusableKycConf = function (reusableConfig) {
        this.reusableConfig = reusableConfig;
        return this;
    };
    InitBuilder.prototype.withOptions = function (options) {
        var _a;
        if (options.hasOwnProperty('adaptIframeHeight')) {
            this.options.adaptIframeHeight = options.adaptIframeHeight;
        }
        if (options.hasOwnProperty('addViewportTag')) {
            this.options.addViewportTag = options.addViewportTag;
        }
        this.options.enableScrollIntoView = (_a = options.enableScrollIntoView) !== null && _a !== void 0 ? _a : true;
        return this;
    };
    InitBuilder.prototype.on = function (event, handler) {
        this.eventHandlers[event] = handler;
        return this;
    };
    InitBuilder.prototype.onMessage = function (handler) {
        this.anyEventHandler = handler;
        return this;
    };
    InitBuilder.prototype.onNavigationUiControlsStateChanged = function (handler) {
        this.eventHandlers['idCheck.onNavigationUiControlsStateChanged'] = handler;
        return this;
    };
    InitBuilder.prototype.build = function () {
        var _this = this;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        var version = getTokenVersion(this.accessToken);
        return new SnsWebSdk(this.baseUrl, {
            version: version,
            theme: (_a = this.config) === null || _a === void 0 ? void 0 : _a.theme,
            customizationName: (_b = this.config) === null || _b === void 0 ? void 0 : _b.customizationName,
            translationName: (_c = this.config) === null || _c === void 0 ? void 0 : _c.translationName,
            accessToken: this.accessToken,
            lang: (_d = this.config) === null || _d === void 0 ? void 0 : _d.lang,
            email: (_e = this.config) === null || _e === void 0 ? void 0 : _e.email,
            phone: (_f = this.config) === null || _f === void 0 ? void 0 : _f.phone,
            country: (_g = this.config) === null || _g === void 0 ? void 0 : _g.country,
            uiConf: (_h = this.config) === null || _h === void 0 ? void 0 : _h.uiConf,
            i18n: (_j = this.config) === null || _j === void 0 ? void 0 : _j.i18n,
            documentsByCountries: (_k = this.config) === null || _k === void 0 ? void 0 : _k.documentsByCountries,
            documentDefinitions: (_l = this.config) === null || _l === void 0 ? void 0 : _l.documentDefinitions,
            autoSelectDocumentDefinitions: (_m = this.config) === null || _m === void 0 ? void 0 : _m.autoSelectDocumentDefinitions,
            controlledNavigationBack: (_o = this.config) === null || _o === void 0 ? void 0 : _o.controlledNavigationBack,
            singleStep: (_p = this.config) === null || _p === void 0 ? void 0 : _p.singleStep,
            reusableConfig: this.reusableConfig,
        }, {
            expirationHandler: {
                legacy: false,
                handler: this.updateAccessToken,
            },
            onMessage: function (type, payload) {
                var _a;
                var handler = _this.eventHandlers[type];
                if (handler) {
                    handler(payload);
                }
                else {
                    (_a = _this.anyEventHandler) === null || _a === void 0 ? void 0 : _a.call(_this, type, payload);
                }
            },
        }, this.options);
    };
    return InitBuilder;
}());
export { InitBuilder };
