var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { getTokenVersion } from './common';
var PROD_API = 'https://api.sumsub.com';
var SnsWebSdk = /** @class */ (function () {
    function SnsWebSdk(baseUrl, config, callbacks, options) {
        var _this = this;
        this.iframe = null;
        this.iframeId = null;
        this.sessionId = '';
        this.$container = null;
        this.initialized = false;
        this.scrollPosition = -1;
        this.scrollElement = null;
        this.onMessage = function (event) {
            _this.onSdkMessage(event);
        };
        this.baseUrl = baseUrl || this.getCurrentBaseUrl(PROD_API, config.accessToken);
        this.config = config;
        this.config.packageVersion = this.getVersion();
        this.callbacks = callbacks;
        this.options = options;
    }
    SnsWebSdk.prototype.getVersion = function () {
        return '[VI]{version}[/VI]';
    };
    SnsWebSdk.prototype.getCurrentBaseUrl = function (baseUrl, accessToken) {
        var posiblePrefixes = ['_act-sbx-jwt-', '_act-jwt-'];
        var suffix = '-v2';
        var prefix = posiblePrefixes.find(function (prefix) { return accessToken.startsWith(prefix); });
        if (prefix) {
            var jwt = accessToken.replace(prefix, '').replace(suffix, '');
            var jsons = jwt
                .split('.')
                .map(function (jwtPart) {
                try {
                    return atob(jwtPart);
                }
                catch (_a) {
                    return jwtPart;
                }
            })
                .map(function (jsonStr) {
                try {
                    return JSON.parse(jsonStr);
                }
                catch (_a) {
                    return jsonStr;
                }
            });
            for (var _i = 0, jsons_1 = jsons; _i < jsons_1.length; _i++) {
                var json = jsons_1[_i];
                if (json === null || json === void 0 ? void 0 : json.url) {
                    return json.url;
                }
            }
        }
        return baseUrl;
    };
    SnsWebSdk.prototype.getIframeId = function () {
        if (this.config.version === 2) {
            try {
                return btoa(this.config.accessToken);
            }
            catch (_) {
                return this.config.accessToken;
            }
        }
        return String(Math.floor(Math.random() * 100000000));
    };
    SnsWebSdk.prototype.launch = function (containerSelectorOrElement) {
        if (this.options.addViewportTag) {
            this.addViewportTag();
        }
        this.iframe = this.createIframe(containerSelectorOrElement);
        this.sessionId = '';
        this.iframeId = 'id_' + this.getIframeId();
        if (this.iframe && this.config) {
            this.registerEventListener();
            this.iframe.src = this.getIframeSrc();
        }
        else {
            console.error('Idensic was not initialized since either provided element was not found in the DOM or invalid config');
        }
    };
    SnsWebSdk.prototype.addViewportTag = function () {
        var viewports = document.getElementsByName('viewport');
        if (!viewports || viewports.length === 0) {
            var viewport = document.createElement('meta');
            viewport.setAttribute('name', 'viewport');
            viewport.setAttribute('content', 'width=device-width,user-scalable=yes');
            document.head.appendChild(viewport);
        }
    };
    SnsWebSdk.prototype.createIframe = function (containerSelectorOrElement) {
        var container = typeof containerSelectorOrElement === 'string'
            ? document.querySelector(containerSelectorOrElement)
            : containerSelectorOrElement;
        if (!container) {
            console.error('Provide a valid selector for the iframe container');
            return null;
        }
        this.$container = container;
        var iframe = document.createElement('iframe');
        iframe.width = '100%';
        iframe.scrolling = 'no';
        iframe.allow = 'camera; microphone; geolocation; clipboard-write';
        iframe.setAttribute('frameborder', '0');
        while (container.firstChild) {
            container.removeChild(container.firstChild);
        }
        container.appendChild(iframe);
        return iframe;
    };
    SnsWebSdk.prototype.getIframeSrc = function () {
        var queryString = '?_=' + this.iframeId;
        var basePath = this.config.version === 2 ? '/websdk' : '/idensic';
        var url = this.baseUrl + basePath + '/websdk.html';
        if (this.config.version === 2 && this.config.theme) {
            queryString += '&theme=' + this.config.theme;
        }
        if (this.config.version === 2 && this.config.customizationName) {
            queryString += '&customizationName=' + encodeURIComponent(this.config.customizationName);
        }
        if (this.config.version === 2 && this.config.translationName) {
            queryString += '&translationName=' + encodeURIComponent(this.config.translationName);
        }
        return url + queryString;
    };
    SnsWebSdk.prototype.registerEventListener = function () {
        window.addEventListener('message', this.onMessage);
    };
    SnsWebSdk.prototype.onSdkMessage = function (event) {
        var _a;
        if (this.baseUrl !== event.origin) {
            return;
        }
        var data = event.data;
        if (!data.method || !~data.method.indexOf('idCheck'))
            return;
        if (this.sessionId && this.sessionId !== data.sessionId) {
            return;
        }
        if (!((_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow)) {
            return;
        }
        // Send init config when iframe is ready
        if (data.method == 'idCheck.onReady' && data.frameId === this.iframeId) {
            this.sessionId = data.sessionId;
            var configOptions = {
                options: {
                    adaptIframeHeight: this.options.adaptIframeHeight,
                    enableScrollIntoView: this.options.enableScrollIntoView,
                },
            };
            this.iframe.contentWindow.postMessage(__assign(__assign({ method: 'idCheck.init' }, this.config), configOptions), '*');
        }
        if (data.method == 'idCheck.onInitialized') {
            this.initialized = true;
        }
        // Adapt Iframe Height
        if (data.method == 'idCheck.onResize' && this.options.adaptIframeHeight) {
            this.iframe.style.height = data.height + 'px';
        }
        if (data.method == 'idCheck.scrollTo' && this.options.adaptIframeHeight) {
            this.scrollTo(data.top);
            return;
        }
        if (data.method == 'idCheck.getScrollPosition') {
            this.getScrollPosition();
            return;
        }
        if (data.method == 'idCheck.restoreScrollPosition') {
            this.restoreScrollPosition();
            return;
        }
        // Call user callbacks function if it set
        var method = data.method;
        delete data.method;
        delete data.frameId;
        delete data.sessionId;
        if (method === 'idCheck.onError' && data.code === 'invalid-token') {
            this.callExpirationHandler();
        }
        else if (method === 'idCheck.onError' && typeof this.callbacks.onError === 'function') {
            this.callbacks.onError(data);
        }
        else if (typeof this.callbacks.onMessage === 'function') {
            this.callbacks.onMessage(method, data);
        }
    };
    SnsWebSdk.prototype.callExpirationHandler = function () {
        var _this = this;
        var expirationHandler = this.callbacks.expirationHandler;
        if (expirationHandler.legacy) {
            expirationHandler.handler(function (newAccessToken) {
                return _this.updateAccessTokenOrReinitialize(newAccessToken);
            });
        }
        else {
            expirationHandler.handler().then(function (newAccessToken) { return _this.updateAccessTokenOrReinitialize(newAccessToken); }, function (error) {
                error !== null && error !== void 0 ? error : (error = 'Failed to update access token');
                if (error.message) {
                    error = error.message;
                }
                if (typeof error !== 'string') {
                    error = String(error);
                }
                _this.updateAccessToken(null, error);
            });
        }
    };
    SnsWebSdk.prototype.updateAccessTokenOrReinitialize = function (newAccessToken) {
        var tokenVersion = newAccessToken ? getTokenVersion(newAccessToken) : this.config.version;
        if (newAccessToken && this.iframe && !this.initialized && this.config.version != tokenVersion) {
            this.sessionId = '';
            this.config.accessToken = newAccessToken;
            this.config.version = tokenVersion;
            this.baseUrl = this.getCurrentBaseUrl(this.baseUrl, newAccessToken);
            this.iframeId = 'id_' + this.getIframeId();
            this.iframe.src = this.getIframeSrc();
            return;
        }
        this.updateAccessToken(newAccessToken);
    };
    SnsWebSdk.prototype.getScrolledElement = function () {
        var _a;
        var scrolledElement = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.parentElement;
        while ((scrolledElement === null || scrolledElement === void 0 ? void 0 : scrolledElement.scrollTop) === 0 && (scrolledElement === null || scrolledElement === void 0 ? void 0 : scrolledElement.tagName) !== 'BODY') {
            scrolledElement = scrolledElement === null || scrolledElement === void 0 ? void 0 : scrolledElement.parentElement;
        }
        return scrolledElement;
    };
    SnsWebSdk.prototype.getScrollPosition = function () {
        var scrolledElement = this.getScrolledElement();
        this.scrollPosition = (scrolledElement === null || scrolledElement === void 0 ? void 0 : scrolledElement.scrollTop) || -1;
        this.scrollElement = this.scrollPosition > 0 && scrolledElement ? scrolledElement : null;
    };
    SnsWebSdk.prototype.restoreScrollPosition = function () {
        if (this.scrollElement && this.scrollPosition >= 0) {
            this.scrollElement.scrollTop = this.scrollPosition;
        }
        this.scrollPosition = -1;
        this.scrollElement = null;
    };
    SnsWebSdk.prototype.scrollTo = function (top) {
        var _a;
        if (!this.options.enableScrollIntoView) {
            return;
        }
        var scrolledElement = this.getScrolledElement();
        // if scroll on window
        if ((scrolledElement === null || scrolledElement === void 0 ? void 0 : scrolledElement.scrollTop) === 0 && (scrolledElement === null || scrolledElement === void 0 ? void 0 : scrolledElement.tagName) === 'BODY') {
            var iframeTop = ((_a = this.iframe) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().top) || 0;
            window.scrollTo({
                top: iframeTop + top,
                behavior: 'smooth',
            });
        }
        else {
            scrolledElement === null || scrolledElement === void 0 ? void 0 : scrolledElement.scrollTo({
                top: top,
                behavior: 'smooth',
            });
        }
    };
    SnsWebSdk.prototype.updateAccessToken = function (newAccessToken, error) {
        var _a, _b;
        (_b = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
            method: 'idCheck.updateAccessToken',
            accessToken: newAccessToken,
            error: error,
        }, '*');
    };
    SnsWebSdk.prototype.destroy = function () {
        window.removeEventListener('message', this.onMessage);
        while (this.$container && this.$container.firstChild) {
            this.$container.removeChild(this.$container.firstChild);
        }
        this.$container = null;
    };
    SnsWebSdk.prototype.navigateBack = function () {
        var _a, _b;
        (_b = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
            method: 'idCheck.callNavigationBack',
        }, '*');
    };
    SnsWebSdk.prototype.singleStepNext = function (step) {
        var _a, _b;
        (_b = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
            method: 'idCheck.callSingleStepNext',
            step: step,
        }, '*');
    };
    SnsWebSdk.prototype.setLanguage = function (language) {
        var _a, _b;
        (_b = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
            method: 'idCheck.callSetLanguage',
            language: language,
        }, '*');
    };
    SnsWebSdk.prototype.setTheme = function (theme) {
        var _a, _b;
        (_b = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
            method: 'idCheck.callSetTheme',
            theme: theme,
        }, '*');
    };
    return SnsWebSdk;
}());
export default SnsWebSdk;
